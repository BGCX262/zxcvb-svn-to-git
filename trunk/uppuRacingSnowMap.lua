require "uppuRacingMap"
require "uppuRacingPenguinBlockObject"
require "uppuRacingHighBlockObject"
require "uppuRacingTileObject"
require "uppuRacingIceTileObject"
require "uppuRacingTrapObject"
require "uppuRacingBombBoxObject"
require "uppuRacingLowBlockObject"

class 'uppuRacingSnowMap' (uppuRacingMap)

function uppuRacingSnowMap:__init(name, scene, owner) super(name, scene, 30, 30, owner)
	self.tempObjects = {}

	self:LoadLevelIceWorld()
	self.finalLap = 1
end

function uppuRacingSnowMap:Destroy()
	for i, object in pairs(self.tempObjects) do
		object:Destroy()
	end
end

function uppuRacingSnowMap:LoadLevelIceWorld()

	local imageList = { }
	imageList[1] = StaticImage()
	imageList[1]:LoadStaticImage("images\\ido_up_bg001_001.bmp", 13, 12, nil, UIConst.Blue)
	imageList[2] = StaticImage()
	imageList[2]:LoadStaticImage("images\\ido_up_bg001_002.bmp", 16, 15, nil, UIConst.Blue)
	imageList[3] = StaticImage()
	imageList[3]:LoadStaticImage("images\\ido_up_bg002_001.bmp", 16, 15, nil, UIConst.Blue)
	imageList[4] = StaticImage()
	imageList[4]:LoadStaticImage("images\\ido_up_bg002_002.bmp", 16, 15, nil, UIConst.Blue)
	imageList[5] = StaticImage()
	imageList[5]:LoadStaticImage("images\\ido_up_bg003_001.bmp", 13, 13, nil, UIConst.Blue)
	imageList[6] = StaticImage()
	imageList[6]:LoadStaticImage("images\\ido_up_bg003_002.bmp", 16, 15, nil, UIConst.Blue)
	imageList[7] = StaticImage()
	imageList[7]:LoadStaticImage("images\\ido_up_bg004_001.bmp", 15, 17, nil, UIConst.Blue)
	imageList[8] = StaticImage()
	imageList[8]:LoadStaticImage("images\\ido_up_bg004_002.bmp", 15, 10, nil, UIConst.Blue)
	imageList[9] = StaticImage()
	imageList[9]:LoadStaticImage("images\\ido_up_bg005_001.bmp", 13, 11, nil, UIConst.Blue)
	imageList[10] = StaticImage()
	imageList[10]:LoadStaticImage("images\\ido_up_bg005_002.bmp", 16, 15, nil, UIConst.Blue)
	imageList[11] = StaticImage()
	imageList[11]:LoadStaticImage("images\\ido_up_bg006_001.bmp", 16, 15, nil, UIConst.Blue)
	imageList[12] = StaticImage()
	imageList[12]:LoadStaticImage("images\\ido_up_bg006_002.bmp", 16, 15, nil, UIConst.Blue)

	local tileImageNumber = { 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
	}

	local tileImageIndex = { 
		143, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 144, 145, 146, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 41, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 41, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 41, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 41, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 79, 79, 79, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 49, 49, 49, 49, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 32, 33, 159, 35, 36, 159, 159, 59, 29, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 47, 48, 159, 50, 51, 159, 159, 159, 159, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 74, 159, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 77, 78, 159, 35, 36, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 92, 93, 159, 50, 51, 159, 59, 29, 159, 159, 159, 65, 159, 159, 205, 159, 205, 159, 205, 159, 205, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 74, 205, 74, 205, 74, 205, 159, 205, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 205, 74, 205, 74, 205, 74, 205, 74, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 74, 205, 74, 205, 74, 205, 159, 205, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 63, 159, 159, 159, 159, 159, 159, 159, 205, 74, 205, 74, 205, 74, 205, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 74, 159, 63, 159, 159, 159, 159, 159, 159, 159, 159, 205, 159, 205, 159, 205, 159, 205, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 74, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 161, 
		173, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65, 159, 159, 159, 159, 159, 159, 159, 159, 159, 176, 
		188, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 189, 190, 191
	}

	local tileImageType = { 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "TT", "TT", "T", "TT", "TT", "T", "T", "TT", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "TT", "TT", "T", "TT", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "TT", "TT", "T", "TT", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "TT", "TT", "T", "TT", "TT", "T", "TT", "TT", "T", "T", "T", "T", "T", "T", "TI", "T", "TI", "T", "TI", "T", "TI", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "TT", "TI", "TT", "TI", "TT", "TI", "T", "TI", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "TI", "TT", "TI", "TT", "TI", "TT", "TI", "TT", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "TT", "TI", "TT", "TI", "TT", "TI", "T", "TI", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "TI", "TT", "TI", "TT", "TI", "TT", "TI", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "TI", "T", "TI", "T", "TI", "T", "TI", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "TT", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", 
		"T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T", "T"
	}

	local objectImageNumber = { 
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 8, 8, 
		8, 8, 8, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 8, -1, 8, 
		8, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, 8, -1, 8, 
		8, 8, -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, 7, -1, -1, 8, -1, -1, 8, -1, -1, -1, 8, 8, 
		8, -1, 8, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 8, -1, -1, 8, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 8, -1, 8, -1, -1, 8, 
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, -1, 8, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 8, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 8, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, -1, 8, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 8, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 8, -1, 8, 
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 8, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 8, 8, 
		8, -1, -1, 8, -1, -1, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 8, -1, 8, 
		8, -1, -1, 8, 8, 8, -1, -1, 8, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 8, 8, -1, -1, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, 8, -1, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, 8, 
		8, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
	}

	local objectImageIndex = { 
		5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, -1, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, -2, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, -3, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, -4, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 144, 144, 999, 21, 24, 
		20, 97, 97, 999, 20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 21, 999, 24, 
		20, 999, 999, 999, 20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 50, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 21, 999, 144, 999, 24, 
		20, 144, 999, 999, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 39, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 235, 999, 999, 999, 999, 999, 999, 999, 235, 999, 999, 999, 999, 235, 999, 999, 144, 999, 999, 24, 999, 999, 999, 21, 24, 
		20, 999, 144, 999, 999, 999, 999, 999, 999, 999, 235, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 235, 999, 999, 24, 999, 999, 144, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 235, 999, 999, 999, 999, 999, 999, 999, 999, 235, 999, 999, 999, 999, 999, 999, 999, 24, 999, 21, 999, 999, 24, 
		35, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 81, 144, 999, 24, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 144, 144, 999, 999, 999, 24, 999, 21, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 144, 999, 999, 999, 999, 999, 144, 999, 999, 999, 999, 999, 999, 24, 21, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 144, 249, 999, 999, 144, 999, 999, 999, 999, 144, 999, 999, 999, 999, 999, 999, 24, 999, 999, 999, 21, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 123, 999, 999, 999, 999, 999, 999, 999, 144, 144, 999, 999, 999, 24, 999, 144, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 144, 999, 138, 80, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 39, 999, 999, 999, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 21, 999, 24, 
		20, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 144, 999, 24, 
		35, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 81, 999, 999, 999, 999, 999, 999, 999, 999, 24, 21, 999, 999, 999, 24, 
		50, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 21, 999, 999, 24, 
		50, 999, 999, 999, 999, 999, 999, 144, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 999, 999, 24, 
		50, 999, 999, 5, 66, 81, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 999, 999, 999, 21, 24, 
		50, 999, 999, 20, 999, 999, 235, 80, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 999, 999, 21, 999, 24, 
		50, 999, 999, 65, 66, 81, 999, 999, 98, 999, 999, 999, 999, 999, 92, 999, 999, 999, 999, 999, 144, 114, 999, 999, 98, 999, 999, 999, 999, 24, 
		50, 999, 999, 999, 999, 999, 999, 999, 98, 144, 999, 98, 999, 999, 92, 144, 999, 999, 999, 999, 999, 999, 999, 144, 98, 999, 999, 999, 999, 24, 
		50, 999, 999, 999, 999, 999, 144, 999, 999, 999, 999, 98, 144, 999, 999, 999, 999, 144, 112, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 24, 
		65, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69
	}

	local objectImageType = { 
		"O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "OP", "OP", "N", "O", "O", 
		"O", "OL", "OL", "N", "O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "O", "N", "O", 
		"O", "N", "N", "N", "O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "O", "N", "OP", "N", "O", 
		"O", "OP", "N", "N", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "OB", "N", "N", "N", "N", "N", "N", "N", "OB", "N", "N", "N", "N", "OB", "N", "N", "OP", "N", "N", "O", "N", "N", "N", "O", "O", 
		"O", "N", "OP", "N", "N", "N", "N", "N", "N", "N", "OB", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "OB", "N", "N", "O", "N", "N", "OP", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "OB", "N", "N", "N", "N", "N", "N", "N", "N", "OB", "N", "N", "N", "N", "N", "N", "N", "O", "N", "O", "N", "N", "O", 
		"O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "OP", "N", "O", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "OP", "OP", "N", "N", "N", "O", "N", "O", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "OP", "N", "N", "N", "N", "N", "OP", "N", "N", "N", "N", "N", "N", "O", "O", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "OP", "OB", "N", "N", "OP", "N", "N", "N", "N", "OP", "N", "N", "N", "N", "N", "N", "O", "N", "N", "N", "O", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "N", "N", "N", "N", "N", "OP", "OP", "N", "N", "N", "O", "N", "OP", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "OP", "N", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "O", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "OP", "N", "O", 
		"O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "N", "N", "N", "N", "N", "N", "N", "N", "O", "O", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "O", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "OP", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "N", "N", "O", 
		"O", "N", "N", "O", "O", "O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", "N", "N", "N", "O", "O", 
		"O", "N", "N", "O", "N", "N", "OB", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "N", "N", "O", "N", "O", 
		"O", "N", "N", "O", "O", "O", "N", "N", "OL", "N", "N", "N", "N", "N", "OL", "N", "N", "N", "N", "N", "OP", "O", "N", "N", "OL", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "N", "N", "OL", "OP", "N", "OL", "N", "N", "OL", "OP", "N", "N", "N", "N", "N", "N", "N", "OP", "OL", "N", "N", "N", "N", "O", 
		"O", "N", "N", "N", "N", "N", "OP", "N", "N", "N", "N", "OL", "OP", "N", "N", "N", "N", "OP", "O", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "O", 
		"O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"
	}

	for i, tileIndex in pairs(tileImageIndex) do
		local tile = imageList[ tileImageNumber[i] ]:Clone()
		tile:SetStaticImageIndex( tileImageIndex[i] )

		local object = nil
		local x, y = self:GetXYPos(i)
		local pos = b2Vec2(x, y)

		if tileImageType[i] == "TH" then
			object = uppuRacingHighBlockObject(self.world, pos, 0, tile)
		elseif tileImageType[i] == "TT" then
			object = uppuRacingTrapObject(self.world, pos, 0, tile)
		elseif tileImageType[i] == "TI" then
			object = uppuRacingIceTileObject(self.world, pos, 0, tile)
		else
			object = uppuRacingTileObject(pos, 0, tile)
		end

		self.tempObjects[#self.tempObjects + 1] = object
	end

	for i, objectIndex in pairs(objectImageIndex) do
		if objectIndex ~= 999 and objectIndex > 0 then
			local object = nil
			local x, y = self:GetXYPos(i)
			local pos = b2Vec2(x, y)

			if objectImageType[i] == "OP" then
				local oid = self:GetNewOID()
				object = uppuRacingPenguinBlockObject(self.world, oid, pos, 0)
				self.objects[oid] = object
			elseif objectImageType[i] == "OB" then
				local oid = self:GetNewOID()
				object = uppuRacingBombBoxObject(self.world, oid, pos, 0)
				self.objects[oid] = object
			elseif objectImageType[i] == "OL" then
				imageList[ objectImageNumber[i] ]:SetStaticImageIndex( objectImageIndex[i] )
				object = uppuRacingLowBlockObject(self.world, pos, 0, true, imageList[ objectImageNumber[i] ]:Clone() )
			else
				imageList[ objectImageNumber[i] ]:SetStaticImageIndex( objectImageIndex[i] )
				object = uppuRacingHighBlockObject(self.world, pos, 0, imageList[ objectImageNumber[i] ]:Clone() )
			end

			self.tempObjects[#self.tempObjects + 1] = object
		end

		if objectIndex < 0 then
			self.startPoint[ math.abs(objectIndex) ] = i
		end
	end

	self.passRects[1] = Rect(0, 300, 240, 360)
	self.passRects[2] = Rect(480, 1560, 540, 1740)
	self.passRects[3] = Rect(1560, 900, 1740, 960)
	self.passRects[4] = Rect(960, 0, 1020, 300)

	self:SendNPOList()
end

function uppuRacingSnowMap:SendNPOList()
	local msg = Message(Object_NPO_List)
	local npolist = List()
	local count = 0
	for oid, object in pairs(self.objects) do
		if object.classtype == CLASS_NPO then
			npolist:Add(oid)
			count = count + 1

			-- 10개씩 묶어서 보냄
			-- RUDP 패킷 크기 문제...
			if count == 10 then
				local npostring = npolist:GetString()
				msg:SetValue(Object_NPO_List.key.list, npostring)
				gameapp:SendToServer(msg)

				npolist:Clear()
				count = 0
			end
		end
	end

	local npostring = npolist:GetString()
	msg:SetValue(Object_NPO_List.key.list, npostring)
	gameapp:SendToServer(msg)
end

